### version 0.0.3 ###
	server {
		listen			81;
		server_name		android.clients.google.com *.android.clients.google.com;

		access_log		/dev/null	TurboWireless;

		syslog			on;
		syslog_addr		127.0.0.1;
		syslog_port		515;
		syslog_program		"tw-nginx-google";
		syslog_log		TurboWireless;

		resolver		127.0.0.1;
		resolver_timeout	30s;

		server_name_in_redirect		off;
		recursive_error_pages		on;

		proxy_redirect		off;
		proxy_set_header	Host $host;
		proxy_set_header	X-Tw-Ori-Dst-Ip "";
		proxy_set_header	X-Tw-Ori-Src-Ip "";
		proxy_pass_header	Date;
		proxy_pass_header	Server;

		proxy_http_version	1.1;

		proxy_connect_timeout	120s;
		proxy_send_timeout	120s;
		proxy_read_timeout	120s;

		proxy_buffering		off;
		proxy_buffer_size	8k;
		proxy_buffers		8 32k;
		proxy_busy_buffers_size	64k;

		proxy_headers_hash_bucket_size	64;
		proxy_headers_hash_max_size	512;

		proxy_ignore_client_abort	off;
		proxy_temp_file_write_size	64k;
		proxy_max_temp_file_size	0;

		proxy_next_upstream		error timeout invalid_header http_500 http_502 http_503 http_504;

		set_ori_dst_ip	$tw_ori_dst_ip	"X-Tw-Ori-Dst-Ip";
		set_ori_src_ip	$tw_ori_src_ip	"X-Tw-Ori-Src-Ip";

		if ($tw_ori_src_ip = "") {
			set	$tw_ori_src_ip		$remote_addr;
		}

		include		tw.*.conf;

		set	$dest_host	$host;

		set_by_lua	$tw_netfilter	'
			local	tw_netfilter = 1

			if ngx.var.ori_dst_addr == ngx.var.server_addr then
				tw_netfilter = 0
			end

			return	tw_netfilter
		';

		if ($tw_netfilter) {
			set	$dest_host	$ori_dst_addr;
		}

		if ($tw_ori_dst_ip) {
			set	$dest_host	$tw_ori_dst_ip;
		}
	
		set	$host_cdn	"android.clients.google.com.ikcd.net";

		location / {
			syslog			off;

			proxy_pass	http://$dest_host;
		}

		location ~* "^/market/GetBinary/[^/]+/.+$" {
			set_by_lua	$x_tw_download	'
				local	x_tw_download = ""

				local	x_tw_dtype = "live"
				local	x_tw_durl = "http://" .. "android.clients.google.com" .. ngx.var.uri
				local	x_tw_dpri = "100"

				ngx.req.set_header("X-Tw-Dtype", x_tw_dtype)
				ngx.req.set_header("X-Tw-Durl", x_tw_durl)
				ngx.req.set_header("X-Tw-Dpri", x_tw_dpri)

				return	x_tw_download
			';

			set_by_lua      $x_tw_info	'
				local	x_tw_info = ""
				local	arp = require("arp")

				if ngx.var.tw_server_addr ~= nil and ngx.var.tw_server_addr ~= "" then
					x_tw_info = ngx.var.tw_server_addr ..  "-" .. arp.get_mac(ngx.var.tw_ori_src_ip)
					ngx.req.set_header("X-Tw-Info", x_tw_info)
				end

				return	x_tw_info
			';

			set_by_lua	$tw_var_p2p	'
				local	ret = ""
				local	tw_vars = ngx.shared.tw_vars
				local   value, flags = tw_vars:get("GOOGLE_P2P")

				if value ~= nil and value ~= "" and value ~= "0" and value ~= 0 then
					ret = value
				end

				return	ret
			';

			proxy_intercept_errors		on;

			if ($tw_var_p2p) {
				proxy_pass	http://android_clients_google_com;
				break;
			}

			proxy_pass	http://error;

			error_page	400	= @cdn;
			error_page	403	= @cdn;
			error_page	404	= @cdn;
			error_page	405	= @cdn;
			error_page	410	= @cdn;
			error_page	500	= @cdn;
			error_page	502	= @cdn;
			error_page	503	= @cdn;
			error_page	504	= @cdn;
		}

		location @cdn {
			set_by_lua      $x_ikcd_ua      '
				local	x_ikcd_ua = ""

				if ngx.var.http_user_agent ~= nil and ngx.var.http_user_agent ~= "" then
					x_ikcd_ua = "X-Ikcd-Ua " .. ngx.var.http_user_agent
					ngx.req.set_header("X-Ikcd-Ua", x_ikcd_ua)
				else
					x_ikcd_ua = "X-Ikcd-Ua "
					ngx.req.set_header("X-Ikcd-Ua", x_ikcd_ua)
				end

				return	x_ikcd_ua
			';

			set_by_lua	$x_tw_download	'
				local	x_tw_download = ""

				ngx.req.clear_header("X-Tw-Dtype")
				ngx.req.clear_header("X-Tw-Durl")
				ngx.req.clear_header("X-Tw-Dpri")

				return	x_tw_download
			';

			set_by_lua	$tw_var_googlecdn	'
				local	ret = ""
				local	tw_vars = ngx.shared.tw_vars
				local   value, flags = tw_vars:get("GOOGLE_CDN")

				if value ~= nil and value ~= "" and value ~= "0" and value ~= 0 then
					ret = value
				end

				return	ret
			';

			proxy_intercept_errors		on;

			if ($tw_var_googlecdn) {
				proxy_pass	http://$host_cdn;
				break;
			}

			proxy_pass	http://error;

			error_page	400	= @mcdownloader;
			error_page	403	= @mcdownloader;
			error_page	404	= @mcdownloader;
			error_page	405	= @mcdownloader;
			error_page	410	= @mcdownloader;
			error_page	500	= @mcdownloader;
			error_page	502	= @mcdownloader;
			error_page	503	= @mcdownloader;
			error_page	504	= @mcdownloader;
		}

		location @mcdownloader {
                        set_by_lua      $x_ikcd_ua      '
				local	x_ikcd_ua = ""

				ngx.req.clear_header("X-Ikcd-Ua")

				return	x_ikcd_ua
			';

                        set_by_lua      $x_tw_info      '
				local	x_tw_info = ""

				ngx.req.clear_header("X-Tw-Info")

				return	x_tw_info
			';

			set_by_lua	$tw_var_mcdownloader	'
				local	ret = ""
				local	tw_vars = ngx.shared.tw_vars
				local   value, flags = tw_vars:get("GOOGLE_MCD")

				if value ~= nil and value ~= "" and value ~= "0" and value ~= 0 then
					ret = value
				end

				return	ret
			';

			proxy_intercept_errors		on;

			if ($tw_var_mcdownloader) {
				proxy_pass	http://mcdownloader;
				break;
			}

			proxy_pass	http://error;

			error_page	400	= @error;
			error_page	403	= @error;
			error_page	404	= @error;
			error_page	405	= @error;
			error_page	410	= @error;
			error_page	500	= @error;
			error_page	502	= @error;
			error_page	503	= @error;
			error_page	504	= @error;
		}

		location @error {
                        set_by_lua      $x_ikcd_ua      '
				local	x_ikcd_ua = ""

				ngx.req.clear_header("X-Ikcd-Ua")

				return	x_ikcd_ua
			';

                        set_by_lua      $x_tw_info      '
				local	x_tw_info = ""

				ngx.req.clear_header("X-Tw-Info")

				return	x_tw_info
			';

			proxy_pass	http://$dest_host;
		}

	}

